# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025 Axon Ivy AG
# This file is distributed under the same license as the Axon Ivy Platform
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Axon Ivy Platform 13.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-07 06:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/concepts/3rd-party-integration/database.rst:2
msgid "Database"
msgstr ""

#: ../../source/concepts/3rd-party-integration/database.rst:4
msgid ""
"A simple way to integrate |ivy| is to use a :ref:`external database "
"<database-configuration>`. From an |ivy| process, you can read and write "
"database contents using a :ref:`process-element-db-activity` or integrate"
" in Java using :ref:`JPA <persistence>`."
msgstr ""

#: ../../source/concepts/3rd-party-integration/index.rst:4
msgid "3rd Party Integration"
msgstr ""

#: ../../source/concepts/3rd-party-integration/index.rst:6
msgid ""
"The basic idea of integrating |ivy| with 3rd party systems is either to "
"invoke an operation on a external system out of an Ivy process (call; "
"|ivy| is the client) or to have a remote system invoke an operation in "
"|ivy| (being called; |ivy| is the server). There are several ways to "
"implement these integrations."
msgstr ""

#: ../../source/concepts/3rd-party-integration/index.rst:11
msgid ""
"Before integrating a 3rd party system, you should have a look at the "
":ref:`|ivy| Market <market>` which may already provides a connector for "
"it."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:4
msgid "Process Extensions"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:6
msgid ""
"|ivy| processes have a rich set of standard elements to fulfill "
"frequently required needs."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:9
msgid ""
"However, the available elements can be extended to address your custom "
"requirements. Here we will elaborate on the extensions possibilities, "
"empowering you to build your own elements."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:18
msgid "Connector Elements"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:20
msgid ""
"Connector elements are the simplest and most effective way to build your "
"custom element, encapsulating your logic. The best thing about it? "
"Creating such an Element doesn't require special new skills apart from "
"being familiar with |ivy| Processes and their elements."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:27
msgid "Callable Sub Processes"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:29
msgid ""
"So this is for you if you have implemented something, that you call "
"repetivitly from multiple processes. Normally, all you change when you "
"reuse this logic is just the process data you work with. To name a few:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:35
msgid "a custom logic in Java wrapped in a Script Activity,"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:36
msgid "a RestClient which you use frequently,"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:37
msgid "or a set of process elements that you use as a pattern."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:39
msgid ""
"Instead of copying and pasting such logic into multiple processes, you "
"can refactor them into a :ref:`Sub Process<process-kind-callable>`. Sub "
"Processes wrap your logic behind a defined interface, declaring your "
"input and output parameters. This gives you the freedom to reuse its "
"logic without additional maintenance efforts."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:46
msgid "|connector-process|"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:111
msgid "connector-process"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:48
msgid "The journey starts, now wrap your logic as follows:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:50
msgid ""
"Create a new Process using the :ref:`process-new-wizard`. Select the type"
" `Callable Sub Process` and finish the creation wizard."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:53
msgid ""
"Name the automatically defined start event, and define your required "
"input parameters and the results you want to provide."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:56
msgid ""
"Copy your custom logic into the Sub Process and connect it with the "
"provided start and end event."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:59
msgid ""
"This allows you already to reuse this encapsulated Sub Process logic in "
"many Processes. You can do it by using the :ref:`process-element-call-"
"sub` Activity and selecting your just-built Sub Process as the target. "
"Connect it, pass parameters to and fro and you are done."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:66
msgid "Custom Element feeling"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:68
msgid ""
"Now let's go one step further and make the :ref:`process-element-call-"
"sub` activity look more like a distinct element that can easily be "
"recognized."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:72
msgid ""
"Go to the :ref:`process-element-sub-process-start` event and add your "
"custom icon onto it using the elements :ref:`process-editor-quick-"
"actions`. This icon will be shown not only on this start but on all "
"calling elements too. This makes your Sub Process way more popular and "
"easier to identify."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:79
msgid ""
"To make this Sub Process even more popular for third parties, we can make"
" it appear in the process editor's palette. Go to the Sub Process start "
"event and open its :ref:`inscription<process-inscription-view>`. In the "
":ref:`process-element-tab-general`, add the :ref:`tag<process-element-"
"tab-general-tags>` `Connector` and save the Process. Being tagged, the "
"element now appears in the :ref:`Extensions<process-element-extension-"
"item>` section, accessible for all Projects that depend upon yours."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:87
msgid "|use-connector|"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:110
msgid "use-connector"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:90
msgid "Community"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:92
msgid ""
"Proud of your work, you may `contribute <https://github.com/axonivy-"
"market/market/wiki>`_ this Sub Process to the |ivy| `Market "
"<https://market.axonivy.com/>`_. So the |ivy| community can reuse and "
"profit from your work. You may choose to do so, to simplify your own "
"maintenance efforts, as the Market offers you a rich ecosystem that "
"manages versions, distributions, and automated test infrastructure for "
"free."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:100
msgid "Limits"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:102
msgid ""
"The only limitation you may face by re-using logic in Sub Processes is "
"the absence of a similar construct for custom Start Events or custom "
"Intermediate Events."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:106
msgid ""
"You can invent such custom logic nevertheless, by using :ref:`extensible-"
"process-elements`, which are explained in the next chapter."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:117
msgid "Extendible Process Elements"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:119
msgid ""
"|ivy| comes with generic process elements that can be used to address "
"particular execution behavior requirements none of the standard process "
"elements can fulfill."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:123
msgid ""
"All generic process elements contain a tab in which a Java class can be "
"selected. The Java class implements the actual execution behavior. Some "
"standard implementations are shipped with the |ivy| core, and with these "
"elements developers are able to specify their own implementation as part "
"of the project."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:129
msgid "These generic elements are:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:131
msgid ":ref:`process-element-program-start`"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:132
msgid "Triggers the start of a new process upon an (external) event."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:134
msgid ":ref:`process-element-wait-program-intermediate-event`"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:135
msgid "Interrupts process execution until an (external) event occurs."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:137
msgid ":ref:`process-element-pi`"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:138
msgid ""
"Executes generic Java code (may interact with a remote system). Using "
"this in new solutions is discouraged, see the warning below."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:144
msgid ""
"Extendible Process Elements were the first solution for custom Process "
"elements. Today however, they are rarely used, since the :ref:`connector-"
"process-elements` offer a similar mechanism which requires less technical"
" skills and offers a better integration into the Process editor tooling."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:153
#: ../../source/concepts/3rd-party-integration/process-extensions.rst:161
#: ../../source/concepts/3rd-party-integration/process-extensions.rst:164
msgid "New Bean Class Wizard"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:155
msgid ""
"With the *New Bean Class Wizard* you can create a Java class that "
"implements the interface of one of the extendible process elements. "
"Optionally, it can also generate a UI editor for the configuration of the"
" event for the corresponding bean. The generated Java class contains "
"example code on how to implement the Java bean."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:167
msgid "Accessibility"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:169
msgid ""
"Process Editor > inscribe > Inscription Mask > ... > Java Class to "
"execute > |image0|"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:262
#: ../../source/concepts/adaptive-case-management.rst:402
#: ../../source/concepts/error-handling.rst:258
msgid "image0"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:175
msgid "Dropin Elements"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:177
msgid ""
"Instead of using the generic extendible process element with your Java "
"class, you can go one step further and implement your own process "
"elements, available in the process editor palette."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:183
msgid ""
"Dropin Elements are hard to develop, build and :ref:`distribute<dropin-"
"installation>`. Therefore, their usage is strongly discouraged. For most "
"customers it's perferrable to work with :ref:`connector-process-elements`"
" or the :ref:`extensible-process-elements`."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:189
msgid ""
"However, to implement your own process elements you need a hosting "
"`Eclipse bundle <extensions-bundles>` in it there's just a interface that"
" must be implemented."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:193
msgid ""
":public-api:`IBpmnProcessElement "
"</ch/ivyteam/ivy/bpm/exec/IBpmnProcessElement.html>`"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:194
msgid ""
"You need to specify a name, an executor class. Optionally, you can also "
"specify what kind of process element you are providing (default is "
"`Activity`), and a validator class."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:201
msgid "|ivy| extensions bundles (Eclipse plugin)"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:203
msgid ""
"In order to provide an |ivy| extension for the Designer or Engine you "
"need to provide it as an Eclipse plugin."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:207
msgid "References"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:209
msgid ""
"The extension development is an advanced programming task. Here we supply"
" you with reference implementations, rather than explaining details of "
"the tools we rely upon."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:213
msgid ""
"We have several active projects that you may use as template for your own"
" development."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:216
msgid ""
"`extension-demos <https://github.com/axonivy/extension-demos/>`_, show "
"extensions to the logger infrastracture, database drivers, and tomcat "
"webserver."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:218
msgid ""
"In the Market there are products that enrich the Designer development "
"tooling, such as the `openai-assistant <https://github.com/axonivy-market"
"/openai-connector/>`_ and the  `excel-dialog <https://github.com/axonivy-"
"market/excel-importer/>`_."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:221
msgid "Eclipse"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:223
msgid ""
"You can create your own Eclipse plugin in the |ivy-designer| by following"
" these steps:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:226
msgid "Start |ivy-designer|"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:228
msgid ""
"Create a new Plug-in Project using the New wizard. Menu: :guilabel:`File`"
" > :guilabel:`New` > :guilabel:`Project ...` > :guilabel:`Plug-in "
"Development` > :guilabel:`Plug-in Project`."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:231
msgid "Develop your extension."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:233
msgid ""
"Switch back to the **META-INF/MANIFEST.MF** file editor. Choose the "
"**Overview** tab and click on the link **Export Wizard**. As "
"**Destination Directory** choose the ``dropins`` directory of your |ivy-"
"designer| or Engine installation. Press the **Finish** button. Your "
"plugin is created in the ``dropins/plugins`` directory."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:244
msgid "Installation"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:246
msgid ""
"Follow these steps to install your extensions in an |ivy-designer| or "
"Engine:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:249
msgid "Stop the running instance (if applicable)."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:251
msgid ""
"Copy your plugin (bundle) that contains your extension classes to the "
"``dropins`` directory inside the |ivy-designer| or Engine installation "
"directory."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:255
msgid "Start the |ivy-designer| or Engine."
msgstr ""

#: ../../source/concepts/3rd-party-integration/process-extensions.rst:259
msgid ""
"If your extension is not active as expected, consult the "
"``dropins/README.html``."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:4
msgid "REST Services"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:6
msgid ""
"REST (representational state transfer) is an architectural style, based "
"on resources to provide inter-system communication."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:9
msgid ""
"The Java API specification for RESTful Web Services is called `JAX-RS "
"<https://docs.oracle.com/javaee/7/api/javax/ws/rs/package-"
"summary.html#package.description>`__. It provides portable APIs for "
"developing, exposing and accessing web applications designed and "
"implemented in compliance with principles of the REST architectural "
"style."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:15
msgid ""
"|ivy| uses the reference implementation libraries of JAX-RS called "
"`Jersey <https://jersey.github.io/>`__."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:20
msgid "Call a Remote REST Service"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:22
msgid ""
"To call a remote REST service, you have to define it in the :ref:`rest-"
"clients-configuration`. After that, you can use a :ref:`process-element-"
"rest-client-activity` to call the REST service."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:26
msgid ""
"Find examples in the :ref:`ConnectivityDemos <importing-demo-projects>` "
"project."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:32
msgid "Provide Your Own REST Services"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:34
msgid ""
"To provide a custom REST service in your |ivy| project, `JAX-RS "
"<https://docs.oracle.com/javaee/7/api/javax/ws/rs/package-"
"summary.html#package.description>`__ annotations can be used. A REST "
"resource is created by adding a Java class to the ``src`` directory. The "
"Java class has to use the correct annotations (as shown below) so it is "
"detected as a REST resource and published automatically. After "
"publishing, the resource will be available on the base path "
"*/<appName>/api/*."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:60
msgid ""
"Further information is available in the `JAX-RS API Specification "
"<https://docs.oracle.com/javaee/7/api/javax/ws/rs/package-"
"summary.html#package.description>`__."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:63
msgid ""
"Many example REST services are available in the :ref:`ConnectivityDemos "
"<importing-demo-projects>`."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:70
msgid "API Publishing"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:72
msgid ""
"Once you have provided new REST APIs with your project, you need to share"
" the service capabilities with your service users. This is simple, since "
"services defined within Ivy projects will be published as `OpenAPI "
"<https://www.openapis.org/>`__ service specifications. You only need to "
"share the specification as a file or serve it on a public URL so that "
"clients can start using it."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:79
msgid ""
"The technical interface description is available under the following URL "
"path:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:81
msgid ""
"``/<appName>/api/openapi.json`` e.g., "
"http://localhost:8081/designer/api/openapi.json (this one is from "
"Designer)"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:88
msgid "Custom OpenAPI Docs"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:89
msgid ""
"The automatically generated OpenAPI specification exposes all strict "
"service capabilities without additional effort for you as a service "
"provider."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:92
msgid ""
"However, there are many service interfaces that become easier to use if "
"they are enriched with explanatory documents. You may like to expose and "
"explain technical implementation details, such as strictly required "
"parameters or possible response statuses. You can provide this "
"information by adding optional OpenAPI annotations to your REST APIs."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:98
msgid ""
"The highlighted lines in the following example show frequent use cases of"
" these optional OpenAPI docs annotations."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:105
msgid "**Example OpenApiResource.java**"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:119
msgid "API Browser"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:121
msgid ""
"You can easily inspect all `OpenAPI <https://www.openapis.org/>`__ "
"services with the API Browser. It gives consumers of your services not "
"only a detailed service description, but a simple client to fire real "
"calls against the services, too."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:125
msgid ""
"To access the API Browser, open the URL ``/system/api-browser``  with a "
"web browser of your choice e.g., http://localhost:8080/system/api-browser"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:135
msgid "Secure APIs"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:137
msgid ""
"REST APIs served by the |ivy-engine| are protected by default to provide "
"safe interactions with your API clients."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:142
msgid "Basic Auth"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:143
msgid ""
"REST APIs are protected with Basic authentication so that only known "
"users of the security system can get valid responses. Setting HTTP Basic "
"authentication headers from an API client is simple and widely supported."
" However, since HTTP Basic headers are base64 encoded and thus can easily"
" be decoded, we strongly recommend to allow :ref:`only encrypted HTTPS "
"traffic <reverse-proxy-secure-https>` on the REST APIs."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:150
msgid ""
"You can customize the authentication for a specific API method by setting"
" security annotations headers:"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:153
msgid "@PermitAll: allows unauthenticated access to anonymous users"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:154
msgid "@RolesAllowed: users must be authenticated and own the defined roles"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:155
msgid "@DenyAll: nobody is allowed to invoke this service"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:157
msgid ""
"You can review the security annotations in the demo project :link-"
"url:`Secure Service <demos-connect-secure-service-java>` within the "
":ref:`ConnectivityDemos <importing-demo-projects>`."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:162
msgid "CSRF Protection"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:163
msgid ""
"To call a modifying REST service via ``PUT``, ``POST`` or ``DELETE``, the"
" caller needs to provide a HTTP header called ``X-Requested-By`` with any"
" value, e.g. ``ivy``. The `CSRF filter "
"<https://github.com/jersey/jersey/blob/master/core-"
"server/src/main/java/org/glassfish/jersey/server/filter/CsrfProtectionFilter.java>`__"
" protects REST services against cross-site request forgery (CSRF). If the"
" client omits the header on a modifying REST request, the response will "
"indicate a failure with the HTTP status code 400 (Bad Request)."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:171
msgid ""
"User provided REST services via ``GET``, ``HEAD`` or ``OPTIONS`` have to "
"be implemented such that no data is modified."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:174
msgid ""
"The CSRF protection filter is enabled by default. However, it can be "
"turned off in an environment where the clients can be trusted (e.g., "
"intranet). See the property ``REST.Servlet.CSRF.Protection`` in the :ref"
":`ivy-yaml`"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:180
msgid "Workflow API"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:182
msgid ""
"|ivy| provides a basic :ref:`Workflow API REST Service <workflow-api>`. "
"You can use it to enable remote systems to request information about "
"tasks of a user etc."
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:188
msgid "Pretty printing"
msgstr ""

#: ../../source/concepts/3rd-party-integration/restapi.rst:190
msgid ""
"If you add the query param `pretty` to the URL to any REST Service "
"provided by the |ivy-engine| which produce JSON, then you get a pretty "
"formatted JSON e.g., "
"http://localhost:8081/designer/api/engine/info?pretty"
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:2
msgid "Web Services"
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:4
msgid ""
"SOAP based web services are often used to integrate various systems. The "
"tooling of |ivy| makes the integration of remote web services very easy "
"and intuitive. You don't need to care much about the technical details "
"behind the scenes."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:11
msgid "Call a Remote Web Service"
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:13
msgid ""
"To call a remote web service, you have to register it in the :ref"
":`webservice-clients-configuration`. Just add a new web service entry, "
"enter the WSDL URI and generate a client which you can use later on in "
"your process."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:17
msgid ""
"After that, you call the remote web service using a :ref:`process-"
"element-web-service-call-activity`. Sending data from your business "
"process to the remote service and the integration of returned data from "
"the service is easy. It works like other data mapping tables."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:24
msgid "Provide a Web Service for Third Parties"
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:26
msgid ""
"If you need to expose an interface to your application for third parties,"
" you may provide it as a SOAP web service."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:29
msgid ""
"To define a new web service interface, add a new process of kind "
":ref:`Webservice <process-kind-webservice>` to your project. Define the "
"supported parameters by configuring the :ref:`process-element-web-"
"service-process-start` event. Now you can implement the business logic of"
" the web service just like any other process flow."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:35
msgid ""
"Once you have implemented the service, start the |ivy-engine| and click "
"the link to the WSDL service definition. Share this WSDL or the link with"
" the third parties that need to consume your service."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:40
msgid "Getting Started"
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:42
msgid ""
"Check out our :dev-url:`video tutorials </tutorial>` to see web service "
"integrations in action."
msgstr ""

#: ../../source/concepts/3rd-party-integration/webservice.rst:45
msgid ""
"If you are looking for web service integration examples with |ivy|, have "
"a look at the :ref:`ConnectivityDemos <importing-demo-projects>` sample "
"project in the Designer."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:4
msgid "Adaptive Case Management"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:6
msgid ""
"Classic BPM processes have a clear flow that defines how the process is "
"executed. Within these strict processes the involved user has limited "
"possibilities to improve the process while executing. Optimizations and "
"flow changes often require a long modeling and re-deployment round-trip. "
"Furthermore the process could get cryptic because every rarely occurring "
"special case has to be modeled. Therefore, the process does no longer "
"clearly show the most relevant business paths. Welcome to the world of "
"spaghetti BPM."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:14
msgid ""
"Today the user has the need to adapt the process flow during execution. "
"Optional side tasks are required in addition to the normal process flow "
"or a set of tasks must be skipped because of a special condition. This "
"brings back the power to the user who has often more knowledge about the "
"domain and the current context of the process. For instance an important "
"information could be received from a phone call, but the workflow system "
"has no knowledge about this analog information."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:23
msgid "Adaptive Implementation"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:26
msgid "Invoking Optional Processes"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:28
msgid ""
"Think about a process where the purchase of an asset must be approved by "
"a line manager. The line manager may want to ask the requester to provide"
" more details why the asset is required. Therefore he will add a side "
"task to ask the requester for clarification. This optional interaction "
"should not be wired into the main approval process as it obfuscates the "
"most used business path. But it could be available as an optional side "
"task that the line manager can start and then gets executed within the "
"current process context."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:36
msgid ""
"In |ivy| processes with side steps can be invoked through Triggers or "
"Signals."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:39
msgid "**Triggers**"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:41
msgid ""
"It is possible to trigger a strictly defined process. Strictly defined "
"means that the calling process knows the target process as it has to be "
"implemented in the same or a required project. RequestStart events can be"
" declared as trigger-able. While the Trigger activity is used to actually"
" trigger such a start."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:47
msgid ""
"So in the request verification front end, a manager could simply trigger "
"the process to enrich the request with a trigger call activity."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:50
#: ../../source/concepts/error-handling.rst:67
msgid "|image0|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:52
#: ../../source/concepts/error-handling.rst:73
msgid "|image1|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:403
#: ../../source/concepts/error-handling.rst:259
msgid "image1"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:54
msgid "**Signals**"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:56
msgid ""
"Most of the time you'd prefer a looser coupling between processes. This "
"is accomplished with Signals. A process that wants to integrate other "
"processes simply fires a signal when a certain state within the process "
"is reached. Multiple other processes in the same application could listen"
" to this signal and all of them will be executed as soon as the signal is"
" fired. A dependency between the firing and listening processes is not "
"required."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:63
msgid ""
"As example think of an employee that starts to work in a company. When "
"the employee is registered from HR, other processes can setup the "
"environment for this employee. An IT responsible will setup a new desktop"
" workstation while an office administrator will get the personal keys for"
" the employee. To do this tasks in parallel and loosely coupled signals "
"are the first choice. The IT- and the office-process could listen to "
"employee entry signals fired by the HR process."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:71
#: ../../source/concepts/error-handling.rst:97
msgid "|image2|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:404
#: ../../source/concepts/error-handling.rst:260
msgid "image2"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:74
msgid "Keeping Loosely Coupled Processes in Same Context"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:76
msgid ""
"A real world agile process execution can touch many different processes. "
"But still the history and the context must be clear for anyone who is "
"involved in a task. So the workflow needs to know whether an invoked "
"process belongs to the invoking case. Or if the invoked process belongs "
"to a new case."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:81
msgid ""
"The entity that can glue multiple process cases together is the :ref"
":`business-case`. All cases and tasks that belong to the same Business "
"Case are presented to the user of a workflow screen as related cases. "
"Therefore, triggerable- and signalable-process start must define whether "
"they belong to the same Business Case as the invoking process case. This "
"can be done with a simple configuration on these starts. See :ref"
":`process-element-signal-start` and :ref:`Trigger Start <process-element-"
"start-request-trigger-tab>` inscription for details."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:90
#: ../../source/concepts/error-handling.rst:177
msgid "|image3|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:405
#: ../../source/concepts/error-handling.rst:261
msgid "image3"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:92
msgid ""
"You can also use the Public API to attach the current case to an existing"
" Business Case."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:102
msgid ""
"For workflow front end developers we offer an API to list all tasks or "
"cases of a Business Case. So showing the involved cases and tasks to a "
"workflow user is a simple implementation. For more details see the Public"
" API of ch.ivyteam.ivy.workflow.businesscase.IBusinessCase."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:113
msgid "Aborting Tasks"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:115
msgid ""
"A long running process could end up with many open tasks that have to be "
"executed by human users. But eventually the environment of the case "
"changes and it does no longer make any sense to complete the open tasks. "
"For instance, think of a car leasing process. If the customer decides "
"shortly before contract signing that he requires leather seats instead of"
" the furnished ones, the car will get more expensive. So the whole credit"
" assessment process has to be run again and thus, the open approval tasks"
" become obsolete."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:123
msgid ""
"A :ref:`process-element-user-task` can support abortion by listening to a"
" signal. The UserTask activity can subscribe to an abortion signal by "
"adding a :ref:`process-element-signal-boundary-event` on it. When the "
"signal that the credit amount of the car changed, is fired from another "
"process the listening UserTask will be aborted. And the process continues"
" at the Signal Boundary Event. Typically, after the Signal Boundary a "
"clean up process follows."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:131
#: ../../source/concepts/error-handling.rst:189
msgid "|image4|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:406
#: ../../source/concepts/error-handling.rst:262
msgid "image4"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:134
msgid "Share Data Between Processes"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:136
msgid ""
"Often an initial larger process starts by gathering data that is later "
"processed and enriched. This data is typically business relevant domain "
"data that can be recognized by domain experts that contribute to the "
"process. Think of a bank employee who grants credits. The data for his "
"processes could look as follows when simplified:"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:144
msgid ""
"To store this kind of data |ivy| provides a simple repository that is "
"called Business Data. This stored data can then be accessed by multiple "
"process instances during the lifetime of a long living complex process. "
"The repository provides access to the data with simple store and load "
"functions similar to well known other repositories such as the "
"EntityManager from JPA. But in comparison to JPA and similar technologies"
" this repository can be used without any database or environment "
"configuration."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:158
msgid ""
"By annotating a data class with the ``@BusinessCaseData`` annotation, all"
" values of the annotated data class are automatically associated with the"
" context of the current Business Case. The data is then shared and "
"accessible from all processes belonging to the Business Case. Multiple "
"data classes of different types can be used inside a Business Case."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:165
msgid "Business Data Analytics"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:167
msgid ""
"Running business processes typically generate highly valuable data, which"
" could influence critical business decisions. Based on the stored data "
"you will typically want to visualize KPIs on a management dashboard. In "
"our credit sample, you may want to visualize the aggregated sum of all "
"open credits. The data in the Business Data repository is stored in form "
"that is easily accessible and explorable with a tool like `Kibana "
"<https://www.elastic.co/products/kibana>`__."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:181
msgid "Regaining the Big Picture"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:183
msgid ""
"Real world BPM projects have shown that big processes tend to get "
"increasingly complex and need to be split up into huge process "
"landscapes, which leads to an intransparent main process flow. Users of "
"the process often do not see how their work contributes to the bigger "
"business process and therefore great opportunities for improvements are "
"not seized. There is also a big need for a unique view of adaptive case "
"operations that can be used by process contributors. Like an overview of "
"optional tasks that a clerk can start at any time."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:192
msgid ""
"The Case Map addresses the needs for flexible and agile Business Cases by"
" providing a clear and simple view on the main process and its execution."
" With the Case Map you can easily orchestrate the main flow of processes "
"and the business can identify and track the stages where a running "
"process instance is."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:199
msgid ""
"A Case Map is divided into stages (in the sample above the stages are: "
"Identification, Credit rating and Approval). Each stage defines a certain"
" phase in the life cycle of a business process. A stage consists of "
"processes (e.g. \"Collect personal data\"). The default flow (also known "
"as the **happy path**) is from left to right and from top to bottom. If "
"the last process of a stage has finished the flow continues on the stage "
"to the right of the current stage. Stages typically have a name and icon."
" The idea is to reuse these icons in Workflow UIs and processes to give "
"the end user a hint in which stage the current Business Case is."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:211
msgid ""
"Besides processes a stage of a Case Map can contain Sidesteps (e.g., "
"\"External solvency service\" in the Case Map above). Sidesteps can be "
"started manually by the workflow user during the ongoing Business Case. A"
" typical Sidestep could be a process which aborts the business process "
"(e.g., abort request). The use of Sidesteps can reduce the time spent on "
"technical round trips, for modeling rare and costly edge cases."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:220
msgid ""
"The dependencies between Case Map, Business Cases and Business Data are "
"as follows: Processes started inside a Case Map create new cases inside "
"the Business Case, which themselves contain tasks for the users. Data "
"between processes can be easily shared using Business Data. A Business "
"Case can be attached to a Case Map, which in turn controls the flow of "
"the processes."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:226
#: ../../source/concepts/adaptive-case-management.rst:229
msgid "Relationship between Business Case, Business Data and Case Map."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:232
msgid "Conclusion"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:234
msgid ""
"To reiterate: signals and triggers can be used to loosely or tightly "
"couple different processes. The innovative Case Map brings order to chaos"
" of spaghetti BPM. A domain expert always has a simple graphical view on "
"the Business Case to which he contributes. The Case Map empowers the "
"domain expert to control the process execution by starting optional "
"Sidesteps or gracefully skipping large parts of the pre-modeled standard "
"flow."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:241
msgid ""
"The Case Map gives the developer and the user a common language to talk "
"about a complex process landscape. The Case Map can be read and "
"understood by anyone that contributes to the process without an "
"introduction. This brings back the old BPM ideas that stood the test of "
"time."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:252
msgid "Signal Reference"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:254
msgid ""
"Signals inform an unknown number of recipients that a specific event has "
"happened. Signals are sent application-wide without the need for project "
"dependency between the sender and receiver."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:259
msgid "Sending Signals"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:261
msgid ""
"A Signal is sent programmatically and consists of a Signal Code and "
"optional signal data."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:266
msgid ""
"Signal codes are defined as strings. Only letters and numbers "
"``[A-Za-z0-9]`` as well as the colon ``:`` as a separator are allowed."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:269
msgid "Valid: ``hr:employee:quit``, ``flight:cancel:no:LX1398``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:272
msgid "Send a Signal Programmatically"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:274
msgid ""
"Send a signal with a custom signal code using the following IvyScript "
"code:"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:291
msgid ""
"It is not recommended to use data classes as signal data as not all "
"receiving projects might have access to these data classes. Better send "
"an id which references an object in a database or send payload data that "
"is encoded as string (e.g., JSON)."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:297
msgid "Send a Signal Manually in the Designer"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:299
msgid ""
"While developing a process it is possible to send a Signal manually in "
"the :guilabel:`Signals` page of the :ref:`designer-workflow-ui`."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:303
msgid "Receiving Signals"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:305
msgid ""
"Signals are received by Signal Boundary Events and Signal Start Events. "
"Receivers can either register for an explicit signal code or a generic "
":ref:`signal-receive-patterns`."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:310
msgid "Signal Boundary Event"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:312
msgid ""
"A :ref:`process-element-signal-boundary-event` attached to a User Task "
"Element destroys the task if a matching signal is received and the task "
"is in SUSPENDED state (see also :ref:`signal-boundary-event` in the "
"Workflow chapter). The inscribed pattern on the Signal Boundary Event "
"defines the filter for awaited signal codes:"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:318
msgid "Listen for a canceled order signal with a specific id defined as macro:"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:325
msgid ""
"Listen for signals that have a ``created`` postfix. E.g "
"(``user:created``, ``order:created``)."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:332
#: ../../source/concepts/error-handling.rst:216
msgid "|image5|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:407
#: ../../source/concepts/error-handling.rst:263
msgid "image5"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:335
msgid ""
"Do not send a signal in a task that is aborted by that signal. Instead, "
"use an additional System task to send the signal. Otherwise, the task "
"that sends the signal will be destroyed leading to an error in the "
"execution of that task."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:339
#: ../../source/concepts/error-handling.rst:226
msgid "|image6|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:408
#: ../../source/concepts/error-handling.rst:264
msgid "image6"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:343
msgid "Signal Start Event"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:345
msgid ""
"With a :ref:`process-element-signal-start` a new process is started if a "
"matching signal code is received."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:348
msgid "|image7|"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:409
msgid "image7"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:353
msgid "Signal Patterns"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:355
msgid ""
"Receivers can listen to a specific signal by its full qualified name. "
"Besides, it is also possible to catch multiple signal sources by "
"listening to its common prefix. Moreover, signal listener pattern can "
"contain wildcards (*) so that the prefixes do not have to be shared "
"necessarily."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:365
msgid "Signal receivers for signal code Signal 'airport:passenger:boarding:3424'"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:368
msgid "Listener pattern"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:368
msgid "Fired?"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:368
msgid "Reason"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:370
msgid "``airport:passenger:boarding:3424``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:370
#: ../../source/concepts/adaptive-case-management.rst:372
#: ../../source/concepts/adaptive-case-management.rst:374
#: ../../source/concepts/adaptive-case-management.rst:376
#: ../../source/concepts/adaptive-case-management.rst:378
#: ../../source/concepts/adaptive-case-management.rst:382
#: ../../source/concepts/adaptive-case-management.rst:384
msgid "true"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:370
msgid "Full qualified match"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:372
msgid "``airport:passenger:boarding``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:372
#: ../../source/concepts/adaptive-case-management.rst:374
#: ../../source/concepts/adaptive-case-management.rst:376
msgid "Prefix matches"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:374
msgid "``airport:passenger``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:376
msgid "``airport``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:378
msgid "Empty matches all signals by prefix"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:380
msgid "``airport:crew:boarding``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:380
#: ../../source/concepts/adaptive-case-management.rst:386
msgid "false"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:380
msgid "Different prefix part: ``crew``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:382
msgid "``airport:*:boarding``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:382
#: ../../source/concepts/adaptive-case-management.rst:384
msgid "Wildcard matches"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:384
msgid "``*:*:boarding``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:386
msgid "``*:boarding``"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:386
msgid "Only one wildcard instead of two"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:391
msgid "Tracing Signals"
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:393
msgid ""
"Signals can be traced by using the :ref:`designer-workflow-ui`. It makes "
"use of the Public API for Signals (``ivy.wf.signals()``)."
msgstr ""

#: ../../source/concepts/adaptive-case-management.rst:398
msgid ""
"For debugging the signal data of a Signal event you can set a :ref"
":`simulate-process-models-breakpoints` on a Signal Start or Signal "
"Boundary Event and inspect the signal variable in the 'Variables' view."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:4
msgid "Application Lifecycle"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:6
msgid ""
"Axon Ivy projects can be installed on an Axon Ivy Engine to bring "
"business processes to life. Several Axon Ivy projects can be installed on"
" an Axon Ivy Engine. The following section explains how to manage "
"individual Axon Ivy projects on an Axon Ivy Engine."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:12
msgid "Security System"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:14
msgid ""
"Users, roles and permissions are managed in a security system. "
":ref:`Users <configuration-security-system>` can be managed manually or "
"made available via an identity provider. The role definitions are read "
"from the project during deployment and the corresponding structures in "
"the Axon Ivy Engine are adapted. In addition, new roles can also be added"
" and deleted at runtime."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:20
msgid ""
"By default, every Axon Ivy Engine comes with the :code:`default`` "
"security system. This is sufficient in the vast majority of cases. An "
"additional security system is only required if you want to set up a test "
"environment on the same engine or operate :ref:`multi-tenancy <multi-"
"tenancy>`. Security systems completely sealed off from other security "
"systems and can consist of several applications."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:36
msgid "Application"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:38
msgid ""
"An application is part of a security system. Axon Ivy projects live in an"
" application. Ideally, applications are cut feature-driven with different"
" release cycles. In our example, the HR processes are independent of the "
"financial processes. Furthermore, applications have sovereignty over the "
"configuration, such as variables, rest clients, web service clients and "
"databases."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:56
msgid "Process Model"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:58
msgid ""
"A process model (PM) is part of an application, which ultimately "
"represents an Axon Ivy project. Nevertheless, it is only a virtual "
"construct, as it is possible to run several versions of an Axon Ivy "
"project at the same time on an Axon Ivy Engine, we refer to this as a "
"Process Model Version (PMV)."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:79
msgid "Process Model Version"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:81
msgid ""
"A process model can contain several versions of an Axon Ivy project, "
"which is called process model version. This makes it possible to make "
"breaking changes to projects without disturbing the old running cases. "
"The disadvantage of multiple versions is that you also have to maintain "
"multiple versions, for example a bugfix may have to be applied to each "
"version. Tasks and cases are assigned to a process model version."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:107
msgid ""
"A process model version has a release state. The release state of a "
"process model version is responsible how the version is used by the "
"system. The most important release state is the state :code:`RELEASED`. "
"Within a process model only one version can be in this state. All "
"processes that are started in a process model are started in the released"
" process model version. A complete list of release state can be found in "
"the following list:"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:116
msgid "Release States"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:117
msgid ""
"**PREPARED**: The process model version has been created and the project "
"may already have been deployed. However, the process model version is not"
" yet used."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:120
msgid ""
"**RELEASED**: The process model version is the currently released "
"version. This means that all new processes are started in this version. "
"Program Start, Web Service Process and Rest Endpoints are only active for"
" process model versions in this state. Only one process model version of "
"a process model can be in state :code:`RELEASED`. If a process model "
"version get's released, then the current released process model version "
"gets :code:`DEPRECATED` or :code:`ARCHIVED`."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:127
msgid ""
"**DEPRECATED**: The process model version has previously been in state "
":code:`RELEASED`, but then another version was released. Therefore, this "
"version is now not in :code:`RELEASED` state but in :code:`DEPRECATED` "
"state. All cases that were started in this process model version will "
"continue to run in this version. As soon as all cases of this version "
"have been ended, the state will change to :code:`ARCHIVED` automatically."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:133
msgid ""
"**ARCHIVED**: The process model version has previously been in state "
":code:`RELEASED`, but then another version was released, and running "
"cases has been finished in this process model. Consequently, this version"
" is now not in :code:`RELEASED` state anymore but has been "
":code:`ARCHIVED`. Actually the engine administrator can change a process "
"model version from state :code:`ARCHIVED` back to state :code:`RELEASED` "
"if necessary."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:139
msgid ""
"**DELETED**: The process model version has been deleted. All project data"
" belonging to this version has been deleted."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:143
msgid "Release State Transitions"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:148
msgid "Feature driven"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:150
msgid ""
"In |ivy|, a project consists of one or more related processes. "
"Applications consist of one or more projects. If you structure your |ivy|"
" projects well into several applications, you benefit from processes "
"being technically isolated and having independent release cycles. "
"Understanding the application lifecycle helps developers and "
"administrators to implement projects faster."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:156
msgid ""
"Imagine a process developer who digitizes business processes with the "
"|ivy| Designer in an |ivy| project. At some point, he deploys his "
"resulting processes onto an |ivy-engine| and brings them to life. At that"
" time, he has to package his projects into an application. For "
"deployment, it is suitable to package a complete application from one or "
"more projects that belong together and then deploy the resulting "
"application. A simple example:"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:165
msgid ""
"*Lynn is a low coder and is digitizing business processes for the HR "
"department. She has just finished her first process so that employees can"
" report expenses. She has packaged this process into the report-expense "
"project and is packaging this project into an application called HR.*"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:177
msgid ""
"*John is a software developer and develops business processes for the "
"finance department. He has already successfully implemented several "
"processes with |ivy|. To structure the processes well, he has packaged "
"them into different |ivy| projects and packages them into the finance "
"application.*"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:189
msgid ""
"*John and Lynn are independent in their work both from a business point "
"of view - requirements and change requests from their departments (HR and"
" Finance), as well as from a technical point of view. They can develop in"
" a decoupled manner and install their applications on the same |ivy-"
"engine| whenever they want.*"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:196
msgid ""
"Thus, applications containing processes are deployed on an |ivy-engine|. "
"The process users log in and can start the processes and are assigned to "
"work on tasks. It is essential to understand how users are managed on an "
"|ivy| Engine. The users are part of a security system. Each |ivy-engine| "
"always comes with the `default` security system. Adding more security "
"systems only makes sense in a :ref:`multi tenancy <multi-tenancy>` use "
"case. Users, their roles, and permissions are part of the security "
"system. When you create an application, you have to define which security"
" system this application lives in. By default, a new application is put "
"into the `default` security system."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:208
msgid ""
"*Now Gunther comes into play. Gunther runs the |ivy-engine| for the "
"DevOps Lynn and John. The process users are synchronized from the company"
" Active Directory. Process users only have one unified process start list"
" and task list covering all applications.*"
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:218
msgid ""
"Applications are used by developers to package related processes and "
"enable independent release cycles of different processes. This promotes "
"feature-driven development. The process users do not realize that the "
"individual processes are part of different applications. They only have a"
" unified process start list and one task list. The structure of the "
"projects can also change at any time."
msgstr ""

#: ../../source/concepts/application-lifecycle/index.rst:224
msgid ""
"Read :ref:`deployment` If you want to learn how you can craft your own "
"applications and deploy them on an |ivy-engine|."
msgstr ""

#: ../../source/concepts/error-handling.rst:4
msgid "Error Handling"
msgstr ""

#: ../../source/concepts/error-handling.rst:6
msgid ""
"Errors are used to model exceptional process paths. With an error, the "
"happy path of a process is left. An error is caught by an Error Boundary "
"Event or Error Start Event if their Error Code pattern matches the Error "
"Code."
msgstr ""

#: ../../source/concepts/error-handling.rst:11
msgid ""
"Errors are divided into technical errors (e.g., database connection "
"problem) or business errors (e.g., approval declined)."
msgstr ""

#: ../../source/concepts/error-handling.rst:14
msgid "An error is defined by an Error Code."
msgstr ""

#: ../../source/concepts/error-handling.rst:16
msgid ""
"The error may be caught by an :ref:`process-element-error-boundary-event`"
" attached to the activity or subprocess, or by an :ref:`process-element-"
"error-start`."
msgstr ""

#: ../../source/concepts/error-handling.rst:21
msgid ""
"An Error Boundary Event or Error Start Event with an empty Error Code "
"catches every error."
msgstr ""

#: ../../source/concepts/error-handling.rst:26
msgid "Error Codes"
msgstr ""

#: ../../source/concepts/error-handling.rst:28
msgid ""
"Error codes are defined as strings. They can be refined by inserting a "
"colon (:). Multiple sub-error codes can be caught using wildcards (*). "
"Trailing wildcards are optional so the string ``custom:error`` is the "
"same as ``custom:error:*``."
msgstr ""

#: ../../source/concepts/error-handling.rst:34
msgid "Example"
msgstr ""

#: ../../source/concepts/error-handling.rst:36
msgid ""
"If the error code ``booking:failed`` is thrown it can be caught with "
"following error code patterns: ``booking:failed``, ``booking`` , "
"``*:failed`` . Additionally, you can catch it by specifying an empty "
"error code. This catches all errors."
msgstr ""

#: ../../source/concepts/error-handling.rst:42
msgid "System Errors"
msgstr ""

#: ../../source/concepts/error-handling.rst:44
msgid ""
"System errors are thrown by process elements like a *Database Step* or a "
"*Web Service Call Step*. Their error codes are set by default and are "
"prefixed with ``ivy`` (e.g., ``ivy:error:database``)."
msgstr ""

#: ../../source/concepts/error-handling.rst:50
msgid "Throwing Errors"
msgstr ""

#: ../../source/concepts/error-handling.rst:52
msgid ""
"An error can be thrown explicitly by an Error End Event, or from code "
"executed in IvyScript or Java. System errors (e.g., "
"``ivy:error:database``) are implicitly thrown by the system."
msgstr ""

#: ../../source/concepts/error-handling.rst:60
msgid "Error End Event"
msgstr ""

#: ../../source/concepts/error-handling.rst:62
msgid ""
"The happy path of a process is left if an error is thrown with a :ref"
":`process-element-error-end` (e.g., if approval has been declined). The "
"Error End Event throws the error to the upper process level, it can't be "
"caught on the same process level."
msgstr ""

#: ../../source/concepts/error-handling.rst:69
msgid ""
"Error End Events can also be used to re-throw a pre-defined |ivy| error "
"with a specific error that has a meaning to the business (e.g., if a web "
"service is not available)."
msgstr ""

#: ../../source/concepts/error-handling.rst:76
msgid "Error Handling in an HTML Dialog"
msgstr ""

#: ../../source/concepts/error-handling.rst:78
msgid ""
"When an error occurs inside of an HTML Dialog the handling is slightly "
"different than the default error handling."
msgstr ""

#: ../../source/concepts/error-handling.rst:82
msgid "Default HTML Dialog Error Handling"
msgstr ""

#: ../../source/concepts/error-handling.rst:84
msgid ""
"Any error thrown (e.g., a Java exception) is handled inside of the HTML "
"Dialog. Therefore, there is no propagation to the caller process or "
"between Ivy/JSF composites. It is important to handle errors locally in "
"the Dialog Logic to let the user work uninterrupted on the same dialog."
msgstr ""

#: ../../source/concepts/error-handling.rst:90
msgid "Exit an HTML Dialog by an Error End Element"
msgstr ""

#: ../../source/concepts/error-handling.rst:92
msgid ""
"It is possible to exit an HTML Dialog by an Error End Element. This is "
"useful to leave the happy path of the calling business process. The "
"throwing Error End Element must be located in the HTML Dialog Logic of an"
" HTML Dialog Page (not a Component)."
msgstr ""

#: ../../source/concepts/error-handling.rst:100
msgid "IvyScript or Java Code"
msgstr ""

#: ../../source/concepts/error-handling.rst:103
msgid "Unhandled Script Exception"
msgstr ""

#: ../../source/concepts/error-handling.rst:105
msgid ""
"If an unhandled exception occurs while executing IvyScript or Java code "
"then the calling process element throws an error with the Error Code "
"``ivy:error:script``. On the error object, the causing Java exception is "
"available as the technical cause."
msgstr ""

#: ../../source/concepts/error-handling.rst:111
msgid "Throwing an Error Programmatically"
msgstr ""

#: ../../source/concepts/error-handling.rst:113
msgid ""
"An error with a certain Error Code can be thrown using the following "
"IvyScript code:"
msgstr ""

#: ../../source/concepts/error-handling.rst:122
msgid "To throw an error with a certain Error Code, use the following Java code:"
msgstr ""

#: ../../source/concepts/error-handling.rst:131
msgid "Elements Throwing System Errors"
msgstr ""

#: ../../source/concepts/error-handling.rst:133
msgid ""
"The process elements Program Interface, Database, WebService, and E-Mail "
"throw system errors. If an exception or timeout occurs on these elements,"
" you can catch it using a matching Error Code or a directly addressed "
"Error Start Event. On the Error Start process element, you can access "
"more information about the error via the variable ``error`` and the "
"legacy variable ``exception``."
msgstr ""

#: ../../source/concepts/error-handling.rst:141
msgid "Catching Errors"
msgstr ""

#: ../../source/concepts/error-handling.rst:143
msgid ""
"Errors can either be caught by Error Boundary Events or Error Start "
"Events."
msgstr ""

#: ../../source/concepts/error-handling.rst:145
msgid "An error is caught in the following order:"
msgstr ""

#: ../../source/concepts/error-handling.rst:147
msgid ""
"By an Error Start Event directly addressed in the element's inscription "
"mask (If available on the inscription)."
msgstr ""

#: ../../source/concepts/error-handling.rst:150
msgid ""
"By an Error Boundary Event attached directly to the activity, the error "
"comes from."
msgstr ""

#: ../../source/concepts/error-handling.rst:153
msgid ""
"By an Error Start Event on the same process level if not thrown by an "
"Error End Event."
msgstr ""

#: ../../source/concepts/error-handling.rst:156
msgid ""
"By an Error Handling on the next higher process level, starting there "
"with step 2 until the top-level process is reached."
msgstr ""

#: ../../source/concepts/error-handling.rst:159
msgid "By a Project Error Process in the top-level project."
msgstr ""

#: ../../source/concepts/error-handling.rst:161
msgid ""
"If the error is not caught it is displayed to the user on the standard "
":ref:`user-dialogs-error-pages`."
msgstr ""

#: ../../source/concepts/error-handling.rst:166
msgid ""
"Each process - including the embedded subprocess - is a separate process "
"level."
msgstr ""

#: ../../source/concepts/error-handling.rst:171
msgid "Error Boundary Event"
msgstr ""

#: ../../source/concepts/error-handling.rst:173
msgid ""
"A :ref:`process-element-error-boundary-event` catches errors that have "
"been thrown from the attaching activity or subprocess if the configured "
"Error Code matches the received error code."
msgstr ""

#: ../../source/concepts/error-handling.rst:183
msgid "Error Start Event"
msgstr ""

#: ../../source/concepts/error-handling.rst:185
msgid ""
"A :ref:`process-element-error-start` catches unhandled errors which were "
"thrown in the same process or inside a subprocess if the configured Error"
" Code matches the thrown error."
msgstr ""

#: ../../source/concepts/error-handling.rst:192
msgid "Loop Prevention"
msgstr ""

#: ../../source/concepts/error-handling.rst:194
msgid ""
"To prevent endless process execution caused by an inappropriate error "
"handling, the Ivy process engine detects loops during the error handling."
" If the engine detects a loop, the error handling will be continued at "
"the next higher process level with the new error code ``ivy:error:loop``,"
" to interrupt the cycle."
msgstr ""

#: ../../source/concepts/error-handling.rst:199
msgid ""
"Loop detection is done on error-catching elements (Error Start Event and "
"Error Boundary Event). The engine checks if there was already an "
"identical execution of the catcher at this process level. Identical "
"means: Same process request, same throwing element (including its process"
" call stack), and same catching element (including its process call "
"stack)."
msgstr ""

#: ../../source/concepts/error-handling.rst:205
msgid "Let's illustrate this with two use cases:"
msgstr ""

#: ../../source/concepts/error-handling.rst:208
msgid "Use Case 1"
msgstr ""

#: ../../source/concepts/error-handling.rst:210
msgid ""
"A process element throws a BpmError. The Error Boundary Event catches the"
" error and calls the process element again. In this case, the loop "
"detection will interrupt the process when the Boundary Error Event is "
"reached the second time. This would also be the case if the throwing "
"error element is located in a composite or callable process."
msgstr ""

#: ../../source/concepts/error-handling.rst:219
msgid "Use Case 2"
msgstr ""

#: ../../source/concepts/error-handling.rst:221
msgid ""
"In this case, the loop detection will interrupt the process 'callInCall1'"
" after the second error handling. The process will be continued by the "
"error handling on the caller process with the error code "
"``ivy:error:loop``. The process will end on the End Element named 'done'."
msgstr ""

#: ../../source/concepts/error-handling.rst:229
msgid "Project Error Process"
msgstr ""

#: ../../source/concepts/error-handling.rst:231
msgid ""
"A Project Error Process catches uncaught errors from the whole project. "
"The name of a Project Error Process must start with ``Error`` and has to "
"reside in the top-level process group *Processes*. It can contain one or "
"more Error Start Events."
msgstr ""

#: ../../source/concepts/error-handling.rst:238
msgid ""
"The process data of the throwing process (i.e., the value of the ``in`` "
"variable) is not available in the Error Start of a Project Error Process."
msgstr ""

#: ../../source/concepts/error-handling.rst:243
msgid "Error Object"
msgstr ""

#: ../../source/concepts/error-handling.rst:245
msgid ""
"The error object provides the following information about the error that "
"was caught:"
msgstr ""

#: ../../source/concepts/error-handling.rst:248
msgid "Unique Error ID"
msgstr ""

#: ../../source/concepts/error-handling.rst:249
msgid "Error Code"
msgstr ""

#: ../../source/concepts/error-handling.rst:250
msgid "Technical Cause (Java Exception)"
msgstr ""

#: ../../source/concepts/error-handling.rst:251
msgid "Process element"
msgstr ""

#: ../../source/concepts/error-handling.rst:252
msgid "Process call stack"
msgstr ""

#: ../../source/concepts/error-handling.rst:253
msgid "User-defined error attributes"
msgstr ""

#: ../../source/concepts/error-handling.rst:255
msgid ""
"Refer to the Public API of :public-api:`BpmError "
"</ch/ivyteam/ivy/bpm/error/BpmError.html>` for detailed information."
msgstr ""

#: ../../source/concepts/index.rst:4
msgid "Concepts"
msgstr ""

#: ../../source/concepts/multi-tenancy/index.rst:4
msgid "Multi-Tenancy"
msgstr ""

#: ../../source/concepts/multi-tenancy/index.rst:6
msgid ""
"As your business grows, you are looking for an effective way to provide "
"your application to multiple customers. You need to ensure that these "
"customers will not notice each other or even see confidential "
"information. This chapter explains and compares how to set up multiple "
"tenants."
msgstr ""

#: ../../source/concepts/multi-tenancy/index.rst:11
msgid ""
"Multi-tenant means making the same software available to several "
"customers. You can do that either by solving this problem with "
"infrastructure and using :ref:`multiple engines <multi-tenancy-engines>` "
"which is highly recommended or do that all on the :ref:`same engine "
"<multi-tenancy-security-systems>`."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:4
msgid "Multiple Engines"
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:6
msgid ""
"The simplest and safest way to achieve multi-tenancy is to run a separate"
" |ivy-engine| installation per tenant or per customer. Doing so brings "
"the following advantages:"
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:10
msgid ""
"**Security**: A separate installation per customer assures that tenants "
"are isolated on the infrastructure level. It is impossible for a customer"
" to see data from another customer due to programming errors or "
"misconfigurations."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:14
msgid ""
"**Scaling**: A separate |ivy-engine| per tenant is simple to maintain and"
" scales very well. On the other hand, if you run an |ivy| Cluster "
"installation and let all customers run on that cluster, you can add more "
"and more nodes to the cluster to handle the additional load. However, the"
" cluster solution cannot scale infinitely. Because adding more nodes "
"induces more communication between the nodes, the network bandwidth "
"available between the cluster nodes limits its growth potential. Adding "
"more nodes at that point makes the cluster slower."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:23
msgid ""
"**Canary Deployments**: Introducing new features always carries risks. "
"Instead of rolling out a new feature to all customers in one fell swoop, "
"you provide only a select group of the customers with the new version. If"
" something goes wrong, only that group is affected. With a separate |ivy-"
"engine| per tenant, Canary Deployments are easy to implement."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:29
msgid ""
"**Stability**: If a customer's |ivy-engine| crashes, only that customer "
"is affected. All other customers are not affected by that crash."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:32
msgid ""
"These are the main reasons why we advocate multi-tenancy with isolated "
"|ivy-engine| installations. We recommend using container environments "
"such as `Docker <https://www.docker.com/>`_, `Kubernetes "
"<https://kubernetes.io/>`_ or `OpenShift <https://openshift.io/>`_ that "
"have solved the provisioning cleanly and keep administrative overhead to "
"a minimum."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-engines.rst:38
msgid ""
"Get started with our |ivy-engine| Docker container :ref:`here <getting-"
"started-docker>`."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-security-systems.rst:4
msgid "Multiple Security Systems"
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-security-systems.rst:6
msgid ""
"You can run multiple tenants on the same |ivy-engine| by creating a "
"security system per tenant. This makes sense for smaller applications. "
"Then, you can create a security system per customer and deploy the "
"application(s) per customer. A security system is isolated from other "
"security systems. This also applies to the workflow context. A process or"
" task lives in a workflow context, which you can equate with the security"
" context. A user cannot view data from another security context."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-security-systems.rst:14
msgid "However, scaling up and down can be difficult with this approach."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-security-systems.rst:16
msgid ""
"The disadvantage of this solution is that programming errors can lead to "
"unwanted access to data of other tenants."
msgstr ""

#: ../../source/concepts/multi-tenancy/multiple-security-systems.rst:19
msgid ""
"This cannot happen with the :ref:`multi-engine <multi-tenancy-engines>` "
"solution."
msgstr ""

#: ../../source/concepts/notification/index.rst:4
msgid "Notification"
msgstr ""

#: ../../source/concepts/notification/index.rst:6
msgid ""
"The Axon Ivy Engine sends notifications to users via different "
"notification channels based on subscription management."
msgstr ""

#: ../../source/concepts/notification/index.rst:9
msgid ""
"A notification arises from a specific event while the Axon Ivy Engine is "
"running. For example, a task assignment to a user is such an event. A "
"notification can be sent to a specific user or role. In the case of a "
"role, the user candidates are calculated, which means all users of this "
"role. If a user is absent and has substitutes, the substitutes also "
"receive a notification. Which notifications have been sent to which users"
" can be monitored in the :ref:`engine cockpit <engine-cockpit-"
"notifications>`."
msgstr ""

#: ../../source/concepts/notification/index.rst:18
msgid "Notification Channel"
msgstr ""

#: ../../source/concepts/notification/index.rst:20
msgid ""
"A notification will be delivered over a notification channel. The Axon "
"Ivy Engine comes with three built-in channels:"
msgstr ""

#: ../../source/concepts/notification/index.rst:23
msgid ""
"**Web Channel**: Notifications will be shown in the header section of the"
" Axon Ivy Portal."
msgstr ""

#: ../../source/concepts/notification/index.rst:24
msgid "**Mail Channel**: Notifications will be sent as mail."
msgstr ""

#: ../../source/concepts/notification/index.rst:25
msgid ""
"**Microsoft Teams Channel**: Notifications will be delivered as Microsoft"
" Teams messages."
msgstr ""

#: ../../source/concepts/notification/index.rst:27
msgid ""
"Each of these channels can be :ref:`configured <engine-notification>` in "
":ref:`ivy.yaml <ivy-yaml>`. There are also dedicated views in the "
":ref:`engine cockpit <engine-cockpit-notification-channels>`."
msgstr ""

#: ../../source/concepts/notification/index.rst:33
msgid "Subscription Management"
msgstr ""

#: ../../source/concepts/notification/index.rst:35
msgid ""
"You can define the default subscriptions for each channel and security "
"system. For example, you can define that by default all users receive "
"notifications for new task assignments over the mail channel but not over"
" the Microsoft Teams channel."
msgstr ""

#: ../../source/concepts/notification/index.rst:56
msgid ""
"All users can override the default subscription settings in their profile"
" in the Axon Ivy Portal."
msgstr ""

#: ../../source/concepts/notification/index.rst:61
msgid ""
"You can suppress a notification for a task assignment :ref:`in the "
"process <process-element-tab-task-notification>` itself. No matter how "
"the subscription is configured, no notification will be created for this "
"given task."
msgstr ""

#: ../../source/concepts/notification/index.rst:68
msgid "Templating"
msgstr ""

#: ../../source/concepts/notification/index.rst:70
msgid ""
"The content of the notification is templated-based. Based on the given "
"channel there are one or multiple templates for one given notification."
msgstr ""

#: ../../source/concepts/notification/index.rst:73
msgid ""
"For example, the mail channel always needs a :code:`Subject` and a "
":code:`Content` template. It is the same for all channels either "
":code:`Subject` or :code:`Content` or both are used:"
msgstr ""

#: ../../source/concepts/notification/index.rst:76
msgid "Web Channel: :code:`Subject`"
msgstr ""

#: ../../source/concepts/notification/index.rst:77
msgid "Mail Channel: :code:`Subject`, :code:`Content`"
msgstr ""

#: ../../source/concepts/notification/index.rst:78
msgid "Microsoft Teams Channel: :code:`Content`"
msgstr ""

#: ../../source/concepts/notification/index.rst:81
msgid "Resolution"
msgstr ""

#: ../../source/concepts/notification/index.rst:83
msgid "Templates are resolved at runtime as follows:"
msgstr ""

#: ../../source/concepts/notification/index.rst:85
msgid ""
"Defined template on the :ref:`task element <process-element-tab-task-"
"notification>` from the project CMS:"
msgstr ""

#: ../../source/concepts/notification/index.rst:87
#: ../../source/concepts/notification/index.rst:92
msgid ":file:`/Notification/[event]/Templates/[template]/[channel]/Subject|Content`"
msgstr ""

#: ../../source/concepts/notification/index.rst:89
#: ../../source/concepts/notification/index.rst:94
msgid "e.g. :file:`/Notification/new-task/Templates/my-template/mail/Subject`"
msgstr ""

#: ../../source/concepts/notification/index.rst:90
msgid ""
"Defined template on the :ref:`task element <process-element-tab-task-"
"notification>` from the system CMS:"
msgstr ""

#: ../../source/concepts/notification/index.rst:95
msgid "Default template from the project CMS:"
msgstr ""

#: ../../source/concepts/notification/index.rst:97
#: ../../source/concepts/notification/index.rst:102
msgid ":file:`/Notification/[event]/Templates/Default/[channel]/Subject|Content`"
msgstr ""

#: ../../source/concepts/notification/index.rst:99
#: ../../source/concepts/notification/index.rst:104
msgid "e.g. :file:`/Notification/new-task/Templates/Default/mail/Subject`"
msgstr ""

#: ../../source/concepts/notification/index.rst:100
msgid "Default template from the system CMS:"
msgstr ""

#: ../../source/concepts/notification/index.rst:105
msgid "Axon Ivy Engine Fallback"
msgstr ""

#: ../../source/concepts/notification/index.rst:108
msgid "CMS Structure"
msgstr ""

#: ../../source/concepts/notification/index.rst:110
msgid ""
"The system CMS is in (:file:`[engineDir]/system/cms`). Here is an example"
" CMS with a :code:`Default` template for the `mail` channel."
msgstr ""

#: ../../source/concepts/notification/index.rst:138
msgid "Dynamic Macros"
msgstr ""

#: ../../source/concepts/notification/index.rst:140
msgid "You can use ivy macros and the following variables in templates:"
msgstr ""

#: ../../source/concepts/notification/index.rst:142
msgid ""
":code:`receiver`: The :public-"
"api:`receiver</ch/ivyteam/ivy/security/ISecurityMember.html>` of the "
"notification."
msgstr ""

#: ../../source/concepts/notification/index.rst:143
msgid ""
":code:`payload`: The object that was provided as a payload of the "
"notification."
msgstr ""

#: ../../source/concepts/notification/index.rst:144
msgid ""
":code:`ivy.session`: :public-"
"api:`IWorkflowSession</ch/ivyteam/ivy/workflow/IWorkflowSession.html>` "
"with the receiver as session user."
msgstr ""

#: ../../source/concepts/notification/index.rst:145
msgid ""
":code:`ivy.cm`: :public-"
"api:`ContentManagement</ch/ivyteam/ivy/cm/exec/ContentManagement.html>`"
msgstr ""

#: ../../source/concepts/notification/index.rst:146
msgid ""
":code:`ivy.application`: :public-"
"api:`IApplication</ch/ivyteam/ivy/application/IApplication.html>`"
msgstr ""

#: ../../source/concepts/notification/index.rst:147
msgid ":code:`ivy.html`: only one method :code:`ivy.html.escape(..)` is available"
msgstr ""

#: ../../source/concepts/notification/index.rst:148
msgid ""
":code:`ivy.branding`: only one method :code:`ivy.branding.ref(..)` is "
"available"
msgstr ""

#: ../../source/concepts/notification/index.rst:152
msgid ""
"You need to escape untrusted input manually. For example, a task name can"
" consist of user input. The user input must be properly escaped so that "
"nobody can make XSS or phishing attacks. Use :code:`ivy.html.escape()` "
"for this."
msgstr ""

#: ../../source/concepts/notification/index.rst:156
msgid ""
"Resource attachments like images or documents can be used too. Please "
"place them in the system CMS and use them in the template via "
":code:`ivy.cm.ref(..)`."
msgstr ""

#: ../../source/concepts/notification/index.rst:160
msgid "Business Notifications"
msgstr ""

#: ../../source/concepts/notification/index.rst:162
msgid ""
"Business notifications can be sent programmatically from a process using "
"the public :public-"
"api:`BusinessNotification</ch/ivyteam/ivy/notification/business/BusinessNotification.html>`"
" API. You can provide the notification receivers and the message "
"programmatically. The message can be a simple String or a multi-lingual "
"message resolved from the CMS."
msgstr ""

#: ../../source/concepts/notification/index.rst:166
msgid ""
"For more complex use cases a template and payload can be specified. In "
"the template you can use the variable described in the :ref:`templating"
"<notification-templating>` chapter and additionally the following "
"variables:"
msgstr ""

#: ../../source/concepts/notification/index.rst:170
msgid ""
":code:`message`: :code:`String` with the provided message in the current "
"language if provided by the CMS."
msgstr ""

#: ../../source/concepts/notification/index.rst:171
msgid ""
":code:`ivy.task`: The current :public-"
"api:`ITask</ch/ivyteam/ivy/workflow/ITask.html>` that was active when the"
" notification was sent."
msgstr ""

#: ../../source/concepts/notification/index.rst:172
msgid ""
":code:`ivy.case`: The current :public-"
"api:`ICase</ch/ivyteam/ivy/workflow/ICase.html>` that was active when the"
" notification was sent."
msgstr ""

#: ../../source/concepts/testing/index.rst:4
msgid "Testing"
msgstr ""

#: ../../source/concepts/testing/index.rst:6
msgid ""
"Writing test code can sometimes be tedious and time consuming, however, "
"in the long run these tests make your life a lot easier. Think about the "
"following points:"
msgstr ""

#: ../../source/concepts/testing/index.rst:9
msgid "Tests can make the **functionality of a software reliable**"
msgstr ""

#: ../../source/concepts/testing/index.rst:11
msgid "Through tests **quality** can be maintained"
msgstr ""

#: ../../source/concepts/testing/index.rst:13
msgid "**Repetitive tasks** can be reduced to a minimum. Let the computer do it!"
msgstr ""

#: ../../source/concepts/testing/index.rst:15
msgid ""
"Ensure that your software **does what it supposed to do** (e.g., after a "
"code change or even a platform update)."
msgstr ""

#: ../../source/concepts/testing/index.rst:18
msgid ""
"Writing good software without tests is nearly impossible, and we want to "
"make it as easy as possible for you to write tests for your |ivy| "
"project. Let's get started!"
msgstr ""

#: ../../source/concepts/testing/index.rst:24
msgid ""
"The following guide is based on a :link-url:`demo project <build-"
"examples-test-project>` and uses the name ``crm`` for the project to be "
"tested and the two testing projects ``crmTests`` for the :ref:`process"
"-<process-testing>` and :ref:`unit-testing<unit-testing>` as well as "
"``crmIntegrationTests`` for the :ref:`web-testing<web-testing>`."
msgstr ""

#: ../../source/concepts/testing/index.rst:30
msgid ""
"Since this documentation only shows how to setup a test project and "
"perform simple tests, you should take a closer look at the demo project."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:4
msgid "Process Testing"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:6
msgid ""
"At this point you should already know how to create working processes. "
"Because software tends to evolve over the years and might receive "
"breaking changes, you should assure its integrity with process tests. As "
"the name implies those tests are meant to run through your processes and "
"act like a user might interact with them. By ensuring that the "
"functionality still works the same way and does not change accidentally, "
"these tests prevent you from introducing bugs and errors in your "
"processes."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:15
msgid "Setup Test Project"
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:3
msgid ""
"To get started you have to create a test project. The '|ivy| Test "
"Project' wizard will help you to create a test project with all required "
"configurations plus a simple sample test."
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:7
msgid "Add a new |ivy| Test Project"
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:9
msgid "Right click on a project you would like to write tests for."
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:11
msgid "Select: New -> |ivy| Test Project in the context menu."
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:13
msgid ""
"Pick the test flavor |TESTKIND| to include in the 'New |ivy| Test "
"Project' wizard."
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:15
msgid "Finish the wizard."
msgstr ""

#: ../../source/concepts/testing/includes/_test-project-setup.rst:17
msgid ""
"A sample test will be generated into the ``src_test`` directory of the "
"newly created project."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:20
msgid "You now have a simple test called ``SampleIvyProcessTest``."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:22
msgid "Note a few things at this point:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:24
msgid "Line 28:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:25
msgid ""
"The test class is annotated as an :public-api:`@IvyProcessTest "
"</ch/ivyteam/ivy/bpm/exec/client/IvyProcessTest.html>`, this enables you "
"to run this test as a process tests."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:29
msgid "Line 31:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:30
msgid ""
"As you want to test a specific process in this test class, the generated "
"test class defines the :public-"
"api:`BpmProcess</ch/ivyteam/ivy/bpm/engine/client/element/BpmProcess.html>`"
" under test in a constant called ``testee``. The passed in ``String`` "
"argument defines the process to run the test against. Replace "
"``MyProcess`` with a process that actually exists in your project under "
"test."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:37
msgid "Line 35:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:38
msgid ""
"The process under test can be directly started since it has only one "
"start element. If your process under test contains multiple start "
"elements you need to define the start element to be executed by using the"
" :public-"
"api:`BpmElement</ch/ivyteam/ivy/bpm/engine/client/element/BpmElement.html>`"
" selector."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:44
msgid "Line 34:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:45
msgid ""
"In each test method you have to pass in a :public-"
"api:`BpmClient</ch/ivyteam/ivy/bpm/engine/client/BpmClient.html>`. This "
"client is supplied by the process testing framework and represents an "
"|ivy-engine| that can run and drive your processes along."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:52
msgid "Write a Process Test"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:54
msgid ""
"Now that everything is ready you can start writing your first actual "
"process test. Let's start by simply testing the following process:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:61
msgid "Execute a Process"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:68
msgid "Now let's have a closer look at the code:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:70
msgid "Line 11-14:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:71
msgid ""
"Here you tell your ``BpmClient`` that you want to test and execute your "
"start element. After calling the :ref:`execute<process-testing-start>` "
"method the ``BpmClient`` drives your process just after the first task."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:77
msgid ""
"Note that the ``BpmClient`` does not run through the whole process at "
"once but runs task by task. It also ignores ``skipTaskList`` flags and "
"stops the execution at ``system tasks``."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:81
msgid "Line 16-17:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:82
msgid ""
"You have multiple APIs to assert your processes, one of it is the :ref"
":`process-testing-history`. The ``History`` gives you access to the "
"executed process elements, in this example we just assert the names of "
"the executed elements."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:87
msgid "Line 19:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:88
msgid ""
"The :ref:`process-testing-workflow` API gives you access to the ``Case``,"
" ``Tasks`` as well as the ``Session`` of your executed process. Use it to"
" fetch information about active ``Cases``/``Tasks``, executed ``Tasks`` "
"or the ``Session``."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:94
msgid "Continue the Process Execution"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:96
msgid ""
"As noted above the ``BpmClient`` does not run through the whole process "
"at once. This means we now want to continue the current process."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:104
msgid "We introduced two new things in the code above:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:106
#: ../../source/concepts/testing/process-testing.rst:147
msgid "Line 17:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:107
msgid ""
"To drive our process along you need to tell your ``BpmClient`` that it "
"should just execute any active task. In this case there is only one "
"possible active task that can be executed, the task from the ``UserTask``"
" element called ``write invoice``."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:112
#: ../../source/concepts/testing/process-testing.rst:150
msgid "Line 18:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:113
msgid ""
"Of course, you cannot just execute a task without declaring an "
"appropriate ``Session``. To declare said ``Session`` you can call the "
":ref:`process-testing-as` method and append the desired ``Session``, "
"``User`` or ``Role`` that should execute the next task."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:118
msgid "If you execute this test then you will face the following error:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:124
msgid ""
"To fix this we need to introduce you to two more concepts, mocking "
"elements and asserting process data."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:129
msgid "Mock Dialogs and Assert Data"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:131
msgid ""
"Process tests are not meant to assert UI elements such as HTML Dialogs. "
"Because dialogs are an important data input interface between users and "
"your processes, you have to mock those inputs. If you want to test the "
"dialogs themselves,refer to chapter  :ref:`web-testing`."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:136
msgid "Let us add a UI mock for the UI of the UserTask 'write invoice' element."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:143
msgid "Line 16:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:144
msgid ""
"Here you are telling the ``BpmClient`` that you are declaring a :ref"
":`process-testing-mock` for an element."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:148
msgid "Here you select the element whose UI you want to mock by its name."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:151
msgid ""
"The HTML Dialog of the UserTask 'write invoice' returns a single value "
"called ``total``. So let's mock the UI part to simulate that the user "
"enters a total of ``935`` on the UI."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:155
msgid "Line 29-30:"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:156
msgid ""
"With the :ref:`process-testing-data` API you can assert the process data "
"of the executed elements."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:159
msgid ""
"Congratulations, you have learned all about the tools and most important "
"APIs to assert your process continuation. In the next section we will "
"have a closer look at some of the APIs."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:165
msgid "API Reference"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:167
msgid ""
"The following section describes some of the more common API calls you can"
" use. If you want to see the full functionality of each API you can "
"follow the links in each subsection to the :public-api:`Public "
"API</ch/ivyteam/ivy/bpm/engine/client/package-summary.html>`."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:176
#: ../../source/concepts/testing/web-testing.rst:64
msgid "Select"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:178
msgid ""
"There are multiple ways to select processes and elements. The easiest way"
" is to find them by their :public-"
"api:`name</ch/ivyteam/ivy/bpm/engine/client/element/BpmProcess.html>`."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:189
msgid "Start"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:191
msgid ""
"To :public-"
"api:`start</ch/ivyteam/ivy/bpm/engine/client/BpmClient.html#start()>` an "
"execution, you need to tell the ``BpmClient`` which ``BpmProcess`` or "
"``BpmElement`` you want to run. To proceed with the execution, either "
"tell the ``BpmClient`` to continue with the previous :public-"
"api:`execution</ch/ivyteam/ivy/bpm/engine/client/ExecutionResult.html>` "
"or choose the next desired ``task``. Using a ``task`` is especially "
"useful if there are multiple active ``tasks`` available."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:202
msgid ""
"To test callable subprocesses use the ``subProcess`` method instead of "
"the ``process`` method."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:210
msgid "As"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:212
msgid ""
"Most processes require a specific ``user`` or ``role`` to be executed. "
"You can define them by calling :public-"
"api:`as</ch/ivyteam/ivy/bpm/engine/client/RequestBuilder.html#as()>`."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:223
msgid "Mock"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:225
msgid ""
"There are two ways of :public-"
"api:`mocking</ch/ivyteam/ivy/bpm/engine/client/BpmClient.html#mock()>` an"
" element. Either you mock the entire element or the UI or call part. If "
"you mock the entire element nothing configured on the element is tested "
"at all. On the other hand if you mock the UI or call part of an element "
"its mapping code is executed and tested."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:232
msgid "If your process runs through an HTML Dialog you always need to mock it."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:241
msgid "History"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:243
msgid ""
"Use the :public-"
"api:`History</ch/ivyteam/ivy/bpm/engine/client/History.html>` to assert "
"the executed process elements. You can either access the exact element "
"objects or elements names."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:254
msgid "Workflow"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:256
msgid ""
"Use the :public-"
"api:`Workflow</ch/ivyteam/ivy/bpm/engine/client/Workflow.html>` to access"
" and assert the active ``case`` or ``task``. You can filter them by "
"activator."
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:267
msgid "Data"
msgstr ""

#: ../../source/concepts/testing/process-testing.rst:269
msgid ""
"With the :public-"
"api:`Data</ch/ivyteam/ivy/bpm/engine/client/ProcessData.html>` API you "
"can assert the process data at different points in your process. You can "
"get the ``data`` from the last executed element or from any element "
"during execution. If an element is executed multiple times you can access"
" the ``data`` of each execution in an ordered list."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:4
msgid "Unit Tests"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:6
msgid ""
"You can easily write Unit Tests in the |ivy-designer| to test your Java "
"source code using JUnit 5. If your code uses the :public-"
"api:`Ivy</ch/ivyteam/ivy/environment/Ivy.html>` environment you can "
"either mock it or use the :public-"
"api:`@IvyTest</ch/ivyteam/ivy/environment/IvyTest.html>` annotation that "
"correctly sets up the environment."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:15
msgid "How to Write Unit Tests"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:20
#: ../../source/concepts/testing/web-testing.rst:20
msgid "Run test"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:22
#: ../../source/concepts/testing/web-testing.rst:22
msgid "Make sure the |ivy-engine| is started with your projects"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:24
#: ../../source/concepts/testing/web-testing.rst:24
msgid "To run this test right-click inside this class -> Run As -> JUnit Test"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:26
#: ../../source/concepts/testing/web-testing.rst:26
msgid "A new **JUnit** View should be opened and the test should be green."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:29
msgid "This is all you need to start writing conventional Unit Tests."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:33
msgid "Set Up the |ivy| Environment"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:35
msgid ""
"To gain access to the :public-"
"api:`Ivy</ch/ivyteam/ivy/environment/Ivy.html>` context the "
"``SampleIvyTest`` class is annotated with the :public-"
"api:`@IvyTest</ch/ivyteam/ivy/environment/IvyTest.html>` annotation."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:41
msgid ""
"If you run your test with ``@IvyTest`` (without process) the bpm engine "
"does not get started. This speeds up test execution."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:45
msgid "Write a Unit Test"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:47
msgid ""
"Here we test a class called ``OrderUtil``. This class needs access to "
"different ``Ivy`` resources like :ref:`Variables <variables>`. Without "
"properly setting up the ``Ivy`` environment we would have to mock all "
"those resources."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:56
msgid ""
"Have a look at the :link-url:`demo project <build-examples-unit-tests>` "
"to see what else is possible."
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:64
#: ../../source/concepts/testing/web-testing.rst:128
msgid "Change Application Runtime"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:66
msgid ""
"For some test cases, you may need to use a different value for a "
":ref:`Variable <variables>` or change an app configuration. In this case "
"use ``AppFixture`` to change the value. The value gets automatically "
"reset to the original value after the test execution. All you have to do "
"is to tell the test that you want an instance of the :code:`AppFixure` "
"class. Let's have a look at it:"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:76
msgid ""
"Or you can change an app configuration, e.g change the URL of a "
":ref:`RestClient <rest-clients-configuration>`:"
msgstr ""

#: ../../source/concepts/testing/unit-testing.rst:83
msgid ""
"Furthermore it is possible to use the ``AppFixture`` to login with an "
"existing user. You can either login with a user name or with an ``IUser``"
" object. In the example below we injected the ``IUser`` object as a "
"method parameter."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:4
msgid "Web Testing"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:6
msgid ""
"Imagine you have just built a workflow app containing multiple user "
"dialogs. Do you really want to always click through the full process, "
"even if you only changed a small part of it? However, you should make "
"sure that the functionality (happy path) of this process is still valid."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:11
msgid ""
"**Web Integration Tests** will always follow the same steps and can be "
"automated."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:15
msgid "Setup a Test Project"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:30
msgid "Write a Web Test"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:32
msgid ""
"Let's start by extending our test class generated before with a :link-"
"url:`real test implementation <build-examples-web-test-base>`. First, we "
"need to start a process. To do this you can use the ``EngineUrl`` utility"
" from the :ref:`web-tester`."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:37
msgid ""
"This process opens a dialog with two input fields (``firstname`` and "
"``lastname``) and a ``submit`` button. After submitting, a second dialog "
"with your input values is displayed."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:48
msgid ""
"The :ref:`@IvyWebTest <web-tester>` annotation can be configured (e.g to "
"select a ``browser`` or to start the test ``headless``)."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:53
msgid "Select, Do and Check"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:55
msgid ""
"Now let's take a look at how this test works. Basically, there are three "
"things you need to know:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:58
msgid "**Select** an element"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:59
msgid "**Do an action** on the selected element"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:60
msgid "**Check a condition** on the selected element"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:66
msgid ""
"To work with a **single element** you need to first select the correct "
"one. Usually you use the ``By.id`` selector to do this:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:75
msgid ""
"To evaluate the real id of an element you can use your browser's "
"**Developer Tools**."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:78
msgid ""
"There are many more options to use selectors, e.g you can select multiple"
" elements:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:85
msgid ""
"Have a look at the :link-url:`demo project <build-examples-web-test-"
"select>` to see more options."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:90
msgid "Execute an Action"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:92
msgid "On the selected element you can perform some actions:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:102
msgid "Check a Condition"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:104
msgid ""
"On your selected element you can check certain conditions (e.g is the "
"element *visible* or contains a specific *value*):"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:113
msgid ""
"You can check multiple conditions on an item or check a condition before "
"performing an action on the item by chaining the method calls:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:123
msgid ""
"Have a look at the :link-url:`demo project <build-examples-web-test-"
"condition>` to see more options."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:130
msgid ""
"For some test cases, you may need to run your web tests with a different "
"user or you need another value for a variable or app configuration. In "
"this case the `WebAppFixture` util can help you to achieve this. Unlike "
"the :ref:`AppFixture <unit-testing-app-fixture>` of :ref:`unit-testing`, "
"the changed values are **not** automatically reset after the test run. "
"Let's have a look at it:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:135
msgid "You can change the current user or log out to an anonymous session:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:141
msgid "If you want to change the value of a variable, you can proceed as follows:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:147
msgid ""
"Or you can change an app configuration, e.g the URL of a :ref:`RestClient"
" <rest-clients-configuration>`:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:156
msgid "Run Automated"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:158
msgid ""
"Let's have a look at how you can run your web tests fully automated (:ref"
":`continuous-integration`). This is especially important if you want fast"
" feedback on breaking changes done by a team member."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:166
msgid "Module Build"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:168
msgid ""
"Both projects, production and test project, need to be compiled during "
"the same run. To do this, we need to first setup a Maven module build:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:171
msgid "Create Maven module"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:173
msgid ""
"Delete projects ``crm`` and ``crmIntegrationTests`` from your |ivy-"
"designer| workspace."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:175
msgid ""
"Open your workspace folder and move both projects into an new folder, e.g"
" :file:`compile-test`"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:178
msgid "Create a :file:`pom.xml` file in the :file:`compile-test` folder."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:180
msgid ""
"Add the following code to the :link-url:`pom.xml <build-examples-web-"
"test-pom>` file (ensure the correct **modules** ``crm`` and "
"``crmIntegrationTests`` are set):"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:187
msgid ""
"Your :link-url:`folder structure <build-examples>` should now look as "
"follows:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:197
msgid "Run module build in |ivy-designer|"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:199
msgid ""
"In your |ivy-designer| open the **Import** Wizard, then **Existing Maven "
"Projects**"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:202
msgid ""
"Select :file:`compile-test/pom.xml` with sub projects (``crm`` and "
"``crmIntegrationTests`` should be visible here) and click **Finish**"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:205
msgid "Right-click on ``compile-test`` -> Run As -> Maven build"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:207
msgid "Set **Goals** to ``clean verify`` and click **Run**"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:209
msgid "This triggers a run that starts and ends with something similar to:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:214
msgid "Congratulations, you can now run your tests fully automated with Maven!"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:218
msgid "Further Resources"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:220
msgid ""
"If you want to know more about web testing, have a look at the :link-"
"url:`second test in our demo project <build-examples-web-test>` or at our"
" :link-url:`other demo projects <demos>` and how they are tested."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:224
msgid ""
"If you want to learn more about how to build a CI/CD pipeline, take a "
"look at the **CI/CD videos** in our :dev-url:`Tutorial section "
"</tutorial>`."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:229
msgid "Selenium"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:231
msgid ""
"Selenium is an open source web testing framework. It works across "
"different browsers and platforms. To communicate with the browser, "
"Selenium provides the **WebDriver** specification."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:235
msgid ""
"In our tests we use the `Selenide <https://selenide.org/>`_ (`GitHub "
"<https://github.com/selenide/selenide>`_, `API "
"<https://selenide.gitbooks.io/user-guide/content/en/selenide-"
"api/selenide.html>`_) framework, which is based on the Selenium "
"WebDriver. If you’re more familiar with plain Selenium tests the "
"following comparison can give you a quick overview about the differences "
"and benefits: `Selenide vs Selenium "
"<https://github.com/selenide/selenide/wiki/Selenide-vs-Selenium>`_. Or "
"you can simply write your tests with the normal Selenium API by accessing"
" the driver object:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:253
msgid "Web-Tester"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:255
msgid ""
"With the :link-url:`web-tester <webtester>` project we provide the "
"testing annotation ``@IvyWebTest``. This annotation sets up the browser "
"connection for you. It can be configured with some parameters:"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:264
msgid ""
"**browser**: The browser which should run the test e.g: chrome, firefox, "
"ie, phantomjs, htmlunit, safari, opera"
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:267
msgid "**headless**: Controls if the browser should start with a UI or not."
msgstr ""

#: ../../source/concepts/testing/web-testing.rst:269
msgid ""
"**reportFolder**: when a test fails the test framework automatically "
"takes screenshots. This folder defines where these screenshots are saved "
"to."
msgstr ""

